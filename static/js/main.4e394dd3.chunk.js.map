{"version":3,"sources":["components/SearchForm.js","components/noteForm.js","components/noteBoard.js","components/note.js","components/Star.js","components/Mark.js","components/AddIcon.js","components/RecipeCard.js","components/SearchResult.js","components/SearchPage.js","components/FavoritePage.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","handleSearchChange","e","console","log","setState","searchBox","target","value","getResults","item","preventDefault","state","type","name","onChange","this","onClick","Component","NoteForm","handleChange","noteBox","resetText","getText","label","NoteBoard","noteObject","deleteIt","Note","noteValue","Star","addStars","index","className","startStatus","Mark","stars","starred","starsObject","allStars","toggleMark","recipe","oldOnes","includes","AddIcon","faveToggle","favorites","RecipeCard","switchNote","noteSide","ingSide","switchIng","showMore","showWord","ingredients","ingredientLines","map","key","subIng","slice","style","width","color","src","image","alt","lable","inFave","href","url","source","display","resetThis","makeStars","setStars","SearchResult","allRecipes","recipes","SearchPage","FavoritePage","splice","indexOf","push","resetNew","deleteAll","resetNotes","dotenv","config","App","apiURL","process","axios","method","then","res","data","hits","catch","error","i","status","fontSize","justifyContent","to","length","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4e394dd3.chunk.js","sourcesContent":["import React,{Component} from 'react'\n\nclass SearchForm extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            searchBox:this.props.searchBox}\n    }\nhandleSearchChange=(e)=>{\n    console.log(e)\n    this.setState({ searchBox: e.target.value })\n}\ngetResults=(e,item)=>{\n    e.preventDefault();\n    this.props.getResults(item)\n}\nrender(){\n    return <form>\n        <input type=\"text\" name=\"searchText\" onChange={this.handleSearchChange} value={this.state.searchBox}/>\n        <button onClick={(e)=>this.getResults(e,this.state.searchBox)}>Search</button>\n    </form>\n}}\nexport default SearchForm;","import React,{Component} from 'react'\n\nclass NoteForm extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            noteBox:this.props.noteBox,\n        }\n    }\n\n    handleChange = (e) => {\n        console.log('handleChange')\n        console.log(e.target.value)\n        this.setState({ \n            noteBox: e.target.value \n        })\n      }\n    resetText=(e)=>{\n        this.props.getText(e, this.props.label,this.state.noteBox)\n        this.setState({ \n            noteBox: ''\n        })\n    }\n      render(){\n    return <form >\n        <input type=\"text\" onChange={this.handleChange} value={this.state.noteBox} />\n        <button onClick={this.resetText}>Submit</button>\n    </form>\n      }\n}\nexport default NoteForm;","import React from 'react'\n\nconst NoteBoard = props => {\n    return <p>\n        {(props.noteObject[props.label])? (props.noteObject[props.label]) : \"no notes available\"}\n        <button onClick={()=>props.deleteIt(props.label)}>Delete</button>\n    </p>\n}\nexport default NoteBoard;","import React, { Component } from 'react'\nimport NoteForm from './noteForm';\nimport NoteBoard from './noteBoard';\n\nclass Note extends Component {\n    constructor(props) {\n        super(props);\n        // this.state = {\n        //     noteBox: '',\n        //     noteValue: '',\n\n        // }\n    }\n    // getText = (e) => {\n    //     e.preventDefault()\n    //     this.setState({\n    //         noteValue: this.state.noteBox,\n    //         noteBox: ''\n    //     })\n\n    // }\n    // deleteIt = () => {\n    //     this.setState({\n    //         noteValue: '',\n    //     })\n    // }\n    // handleChange = (e) => {\n    //     this.setState({ noteBox: e.target.value })\n\n    // }\n\n    render() {\n        console.log(\"this is label\", this.props.label)\n        return (\n            <>\n                <NoteForm noteObject={this.props.noteObject} label={this.props.label} getText={this.props.getText} handleChange={this.props.handleChange} noteBox={this.props.noteBox} />\n                <NoteBoard noteObject={this.props.noteObject} label={this.props.label} noteValue={this.props.noteValue} deleteIt={this.props.deleteIt} />\n            </>\n        );\n    }\n}\n\nexport default Note;","import React from 'react'\n\nconst Star = props=>{\n    return <><span onClick={()=>props.addStars(props.index,props.label)} className={props.startStatus}></span></>\n}\nexport default Star;\n{}","import React,{Component} from 'react'\nimport Star from '../components/Star'\nclass Mark extends Component {\n    constructor(props){\n    super(props);\n    this.state={\n        stars:5,\n        starred:this.props.starsObject[this.props.label]?this.props.starsObject[this.props.label]:0,\n        allStars:[]\n    }\n    }\n// componentDidMount(){\n//     this.makeStars()\n    // console.log(this.props.starsObject)\n    // const allStars= []\n    // for(let i = 0; i<5; i++){\n    //     if(i<=this.state.starred)\n    //     allStars.push(<Star key={i} index={i} label={this.props.label} addStars={this.addStars} startStatus={\"fa fa-star checked\"}/>)\n    //     else{\n    //         allStars.push(<Star key={i} index={i} label={this.props.label} addStars={this.addStars} startStatus={\"fa fa-star\"}/>)\n\n    //     }\n    // }\n   \n    // allStars.push(<button onClick={()=>this.resetThis(0,this.props.label)}>Reset</button>)\n\n    // this.setState({\n    //     allStars:  allStars\n    // })\n// }\n// makeStars=()=>{\n//     console.log(this.props.starsObject)\n//     const allStars= []\n//     for(let i = 0; i<5; i++){\n//         if(i<=this.state.starred)\n//         allStars.push(<Star key={i} index={i} label={this.props.label} addStars={this.addStars} startStatus={\"fa fa-star checked\"}/>)\n//         else{\n//             allStars.push(<Star key={i} index={i} label={this.props.label} addStars={this.addStars} startStatus={\"fa fa-star\"}/>)\n\n//         }\n//     }\n   \n//     allStars.push(<button onClick={()=>this.resetThis(0,this.props.label)}>Reset</button>)\n\n//     this.setState({\n//         allStars:  allStars\n//     })\n// }\n\n// resetThis=(index,label)=>{\n//     console.log('this is this')\n//     this.props.setStars(index,label)\n//     this.setState({\n//         starred:0\n//     })\n//     this.makeStars()\n// }\n// addStars =(index, label)=>{\n//    const allStars=[]\n//    for(let i=0; i<5;i++){\n//        allStars.push(<Star label={this.props.label} key = {i} index={i} addStars={this.addStars} startStatus={\"fa fa-star\"}/>)\n//    }\n//    for(let i =0; i<=index;i++ ){\n//            allStars[i]=<Star  label={this.props.label} key = {i} index={i} addStars={this.addStars} startStatus={\"fa fa-star checked\"}/>\n       \n//    }\n//    allStars.push(<button onClick={()=>this.resetThis(0,this.props.label)}>Reset</button>)\n//    this.setState({\n//        allStars:allStars\n//    })\n//    this.props.setStars(index,label)\n// }\n\nrender(){\n    // console.log(\"this is allstars\",this.state.allStars, this.props.label)\n    return (<div>\n        {/* {this.state.allStars}\n</div>\n    <div style={{ display: \"inline\" }}> */}\n        <button className=\"pointer\" onClick={() => this.props.toggleMark(this.props.recipe.label)}>Status</button>\n        <p>{this.props.oldOnes.includes(this.props.recipe.label) ? 'Old' : 'New'}</p>\n    </div>\n    );}\n}\n\nexport default Mark;","import React from 'react'\n\nconst AddIcon = props => {\n\n    return <p onClick={props.faveToggle}>\n        <i className=\"material-icons pointer\" >\n\n            {(props.favorites.includes(props.item)) ? \"remove\" : \"add\"}\n        </i>\n    </p>\n}\nexport default AddIcon","import React, { Component } from 'react'\nimport Note from './note'\nimport Mark from './Mark'\nimport AddIcon from './AddIcon';\nclass RecipeCard extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            noteSide: false,\n            ingSide: true,\n            showMore: false,\n            showWord: '...more',\n            noteValue: '',\n            noteBox: '',\n\n\n        }\n    }\n    componentDidMount() {\n        const ingredients = this.props.recipe.ingredientLines.map((item, index) => {\n            return <li key={index}>{item}</li>\n        })\n        this.setState({\n            ingredients: ingredients,\n            subIng: ingredients.slice(0, 3)\n        })\n    }\n    switchNote = () => {\n        this.setState({\n\n            noteSide: true,\n            ingSide: false\n        })\n    }\n    switchIng = () => {\n        console.log('ingside')\n        this.setState({\n\n            noteSide: false,\n            ingSide: true\n        })\n    }\n    showMore = () => {\n        this.setState({\n            showMore: !this.state.showMore,\n            showWord: (this.state.showWord == '...more') ? 'Less.' : '...more',\n        })\n    }\n    // getText = (e) => {\n    //     e.preventDefault()\n\n    //     console.log('getText', this.state.noteBox)\n    //     this.setState({\n    //         noteValue: this.state.noteBox,\n    //         noteBox: ''\n    //     })\n\n    // }\n    // deleteIt = () => {\n    //     console.log('deleteIt')\n    //     this.setState({\n    //         noteValue: '',\n    //     })\n    // };\n    // handleChange = (e) => {\n    //     console.log('handleChange')\n    //     this.setState({ noteBox: e.target.value })\n\n    // }\n\n    render() {\n        console.log(\"this is recipeCard\")\n        return <div className=\"card col-md-3 col-sm-6 col-12\" style={{ width: \"18rem\" }}>\n            <h5 className=\"card-header bg-dark\" style={{ color: \"white\" }}>{this.props.recipe.label}</h5>\n            <img className=\"card-img-top\" src={this.props.recipe.image} alt={this.props.recipe.lable} />\n            <div className=\"card-body\">\n                <div className=\"card-header\">\n                    <ul className=\"nav nav-tabs card-header-tabs\">\n\n                        <li className=\"nav-item\">\n                            <a className=\"nav-link\" onClick={this.switchIng}>Ingredients</a>\n                        </li>\n                        {(this.props.inFave) ? <li className=\"nav-item\">\n                            <a className=\"nav-link\" onClick={this.switchNote}>Notes</a>\n                        </li> : null}\n\n                    </ul>\n                </div>\n                <div className=\"container\">\n                    <div className=\"row\">\n                        {(this.state.ingSide) ?\n                            <div >\n                                <ul>\n                                    <p className=\"card-text\">\n                                        {(this.state.showMore) ? this.state.ingredients : this.state.subIng}<span className=\"showMore pointer\" onClick={this.showMore}>{this.state.showWord}</span>\n                                    </p>\n                                </ul>\n                                <a className=\"btn btn-primary\" href={this.props.recipe.url}>More info on {`${this.props.recipe.source}`}</a>\n\n                            </div> :\n                            <div>\n                                {(this.props.inFave) ? <Note noteObject={this.props.noteObject} label={this.props.recipe.label} getText={this.props.getText} deleteIt={this.props.deleteIt} handleChange={this.props.handleChange} noteValue={this.props.noteValue} noteBox={this.props.noteBox} /> : null}\n                            </div>}\n                    </div>\n                    <div className=\"row\">\n                        <AddIcon faveToggle={this.props.faveToggle} favorites={this.props.favorites} item={this.props.item} />\n                        {(this.props.inFave) ? <Mark style={{ display: \"inline\" }} resetThis={this.props.resetThis} makeStars={this.props.makeStars} allStars={this.props.allStars} setStars={this.props.setStars} starsObject={this.props.starsObject} label={this.props.recipe.label} recipe={this.props.recipe} toggleMark={this.props.toggleMark} oldOnes={this.props.oldOnes} addStars={this.props.addStars}/> : null}\n                    </div>\n                </div>\n            </div>\n        </div>\n\n    }\n}\n\nexport default RecipeCard;","import React from 'react'\nimport RecipeCard from './RecipeCard'\n\nconst SearchResult = props => {\nconsole.log(\"this is searchResult\")\n    const allRecipes = props.recipes.map((item, index) => {\n        return <RecipeCard resetThis={props.resetThis} makeStars={props.makeStars} allStars={props.allStars} setStars={props.setStars} starsObject={props.starsObject} noteObject={props.noteObject} recipe={item.recipe} key={index} faveToggle={() => props.faveToggle(item)} inFave={props.inFave} toggleMark={props.toggleMark} oldOnes={props.oldOnes} favorites={props.favorites} item={item} getText={props.getText} deleteIt={props.deleteIt} handleChange={props.handleChange} noteValue={props.noteValue} noteBox={props.noteBox} addStars={props.addStars}/>\n    }\n    )\n    return<div className=\"row\"> {allRecipes}</div>\n\n}\nexport default SearchResult;","import React, { Component } from 'react'\nimport SearchForm from './SearchForm';\nimport SearchResult from './SearchResult';\n\nclass SearchPage extends Component {\n\n    render() {\n        return (\n            <>\n                <SearchForm getResults={this.props.getResults} handleSearchChange={this.props.handleSearchChange} searchBox={this.props.searchBox}/>\n                <SearchResult recipes={this.props.recipes} faveToggle={this.props.faveToggle} inFave={false} favorites={this.props.favorites} />\n            </>\n        );\n    }\n}\n\nexport default SearchPage;","import React, { Component } from 'react'\nimport SearchResult from './SearchResult';\n\nclass FavoritePage extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            oldOnes:[],\n        }\n    }\n    toggleMark = (e) => {\n        const oldOnes = this.state.oldOnes\n        console.log('recipe is ',e,' oldOnes ',oldOnes)\n        if (oldOnes.includes(e)) {\n          console.log('it is in status')\n          oldOnes.splice(oldOnes.indexOf(e), 1)\n        }\n        else {\n          console.log('in else')\n          oldOnes.push(e)\n        }\n        this.setState({\n          oldOnes: oldOnes\n        });\n      }\nresetNew=()=>{\nthis.setState({\n  oldOnes:[]\n})\n}\n    render() {\nconsole.log('this is render')\n        return (<div>\n            <h1>Here is favorite page</h1>\n            <button onClick={this.props.deleteAll}>Delete All</button>\n            <button onClick={this.props.resetNew}>Reset All</button>\n            <button onClick={this.props.resetNotes}>Remove Notes</button>\n            <SearchResult noteObject={this.props.noteObject} recipes={this.props.favorites} faveToggle={this.props.faveToggle} inFave={true} oldOnes={this.props.oldOnes} toggleMark={this.props.toggleMark} favorites={this.props.favorites} getText={this.props.getText} deleteIt={this.props.deleteIt} handleChange={this.props.handleChange} noteValue={this.props.noteValue} noteBox={this.props.noteBox} starsObject={this.props.starsObject} setStars={this.props.setStars} allStars={this.props.allStars} resetThis={this.props.resetThis} makeStars={this.props.makeStars} addStars={this.props.addStars}/>\n\n        </div>\n        );\n    }\n}\n\nexport default FavoritePage;","/*\nRecipe (App): Recipes is an app that generates cooking recipes based on a food item searched by the user. Recipes can be added to a list, marked as new/old and notes can be added to recipe cards in the list. You can visit the app here =>(https://almarrim.github.io/recipes/)\nfor how to use it checkout the instructions in the README.md file.\n*****Disclaimer: This version of the code has parts of a merged branch that are not used here anymore. Due to the limited to submit this project and the errors created by removing parts of the unused codes(all related unused codes need to be removed), it was left here for the time being. They will be removed in future updates. Also, more comments will be added.*****\nCreated by: Mohammed Almarri\n*/\n\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport SearchPage from './components/SearchPage';\nimport dotenv from 'dotenv';\nimport axios from 'axios';\nimport { BrowserRouter as Router, Route, Switch, Link } from 'react-router-dom';\nimport FavoritePage from './components/FavoritePage';\nimport Star from './components/Star';\ndotenv.config();\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recipes: [], //this is the state that carries all the recipes to the search result page and downward to child-components.\n      favorites: [],//this is the state that carries the selected recipes to the favorite page and downward.\n      noteObject: {},//this is an object the consists of recipe name as a key and the text note as a value. it is uesd to prevent notes from being lost when going to other pages in the app\n      noteValue: '',//used with notes\n      noteBox: '',//used with notes to carry the text to the noteobject\n      oldOnes: [],//this is the array that carries the old(tried) recipes\n      searchBox: '',//this is the search box text in the search page\n      starsObject: {},\n    };\n  }\n  /*\n  getResults is where the axios gets called. getResults takes the searchBox text as item and pass it to the axios through the url. getResults then assign the results to recipes, where it the data get used to show the needed info. Also, refreshes the searchBox and set it empty again.\n  */\n  getResults = (item) => {\n    const apiURL = `https://api.edamam.com/search?q=${item}&app_id=${process.env.REACT_APP_EDMAME_API_ID}&app_key=${process.env.REACT_APP_EDMAME_API_KEY}&from=0&to=20`\n    axios({\n      method: 'get',\n      url: apiURL\n    })\n      .then(res => {\n        this.setState({\n          recipes: res.data.hits,\n          searchBox: ''\n          // recipes: hits,\n        })\n      })\n      .catch(console.error())\n\n  }\n  /*\nfaveToggle is the function that is responsible for adding removing recipes from the favorite list page.\n  */\n  faveToggle = (e) => {\n    const favorites = [...this.state.favorites]\n    if (favorites.includes(e)) {\n      favorites.splice(favorites.indexOf(e), 1)\n      console.log(`${e.recipe.label} has been removed from your favorite`)\n    }\n    else {\n      favorites.push(e)\n      console.log(`${e.recipe.label} has been added to your favorite`)\n    }\n\n    this.setState({\n      favorites: favorites\n    })\n  }\n  //Deletes all the recipes from the favorite page\n  deleteAll = () => {\n    this.setState({\n      favorites: []\n    })\n  }\n  /*\n  getText is the method responsible for taking the note text and passing it to the object with the related key, and it refreshes the textbox of the note tap. label is the recipe name(the key). noteBox is the value. e is the event.\n  */\n  getText = (e, label, noteBox) => {\n    e.preventDefault()\n    const noteObject = this.state.noteObject;\n    noteObject[label] = noteBox;\n    this.setState({\n      noteValue: noteBox,\n      noteBox: '',\n      noteObject: noteObject\n    })\n\n  }\n  //delete only the attached note\n  deleteIt = (item) => {\n    console.log('deleteIt')\n    const noteObject = { ...this.state.noteObject }\n    delete noteObject[item]\n    this.setState({\n      noteValue: '',\n      noteObject: noteObject\n\n    })\n  };\n  //this updates the searchBox, which get passed to the api. and allows continues writing\n  handleSearchChange = (e) => {\n    this.setState({ searchBox: e.target.value })\n  }\n  handleChange = (e) => {\n    console.log('handleChange')\n    // this.setState({ noteBox: e.target.value })\n\n  }\n  //not used for the current version. As well as all the following related methods related to stars\n  resetNew = () => {\n    this.setState({\n      starsObject: {},\n    })\n  }\n  setStars = (index, label) => {\n    const starsObject = { ...this.state.starsObject };\n    starsObject[label] = index;\n    this.setState({\n      starsObject: starsObject\n    })\n  }\n  makeStars = () => {\n    console.log(this.props.starsObject)\n    const allStars = []\n    for (let i = 0; i < 5; i++) {\n      if (i <= this.state.starred)\n        allStars.push(<Star key={i} index={i} label={this.props.label} addStars={this.addStars} startStatus={\"fa fa-star checked\"} />)\n      else {\n        allStars.push(<Star key={i} index={i} label={this.props.label} addStars={this.addStars} startStatus={\"fa fa-star\"} />)\n\n      }\n    }\n\n    allStars.push(<button onClick={() => this.resetThis(0, this.props.label)}>Reset</button>)\n\n    this.setState({\n      allStars: allStars\n    })\n  }\n  resetThis = (index, label) => {\n    console.log('this is this')\n    this.setStars(index, label)\n    this.setState({\n      starred: 0\n    })\n    this.makeStars()\n  }\n  addStars = (index, label) => {\n    const allStars = []\n    for (let i = 0; i < 5; i++) {\n      allStars.push(<Star label={label} key={i} index={i} addStars={this.addStars} startStatus={\"fa fa-star\"} />)\n    }\n    for (let i = 0; i <= index; i++) {\n      console.log('allaslsjflaksdjf', i)\n\n      allStars[i] = <Star label={label} key={i} index={i} addStars={this.addStars} startStatus={\"fa fa-star checked\"} />\n\n    }\n    allStars.push(<button onClick={() => this.props.resetThis(0, this.props.label)}>Reset</button>)\n    this.setState({\n      allStars: allStars\n    })\n    this.props.setStars(index, label)\n  }\n  /*\n  toggleMark toggles the status of the recipe card in the favorite page. It updates the oldOnes array which holds the data of cards set to Old status.\n  */\n  toggleMark = (e) => {\n    const oldOnes = this.state.oldOnes\n    console.log('recipe is ', e, ' oldOnes ', oldOnes)\n    if (oldOnes.includes(e)) {\n      console.log('it is in status')\n      oldOnes.splice(oldOnes.indexOf(e), 1)\n    }\n    else {\n      console.log('in else')\n      oldOnes.push(e)\n    }\n    this.setState({\n      oldOnes: oldOnes\n    });\n  }\n  /*\nresetNew resets all recipe cards to New status.\n  */\n  resetNew = () => {\n    console.log('in resetnew')\n    this.setState({ status: 'New', oldOnes: [] })\n  }\n  //resetNote removes all the notes from the recipe cards\n  resetNotes = () => {\n    this.setState({ noteObject: {} })\n  }\n  render() {\n    return (\n\n      <Router>\n\n        <nav className=\"navbar navbar-dark bg-dark sticky-top\" style={{ fontSize: \"2rem\", justifyContent: \"space-around\" }}>\n          <Link className=\"nav-item nav-link\" to='/'>Search</Link>\n          <Link className=\"nav-item nav-link\" to='/mylist'>My List{' | '}{this.state.favorites.length}</Link>\n        </nav>\n        {/* SearchPage and FavoritePage are the only direct children of the main App.js. the SearchPage is where the search happens and the search results are shown. The FavoritePage is where the list of the selected recipes are created. */}\n        <Switch>\n          <Route exact path='/' render={() => <SearchPage getResults={this.getResults} recipes={this.state.recipes} faveToggle={this.faveToggle} favorites={this.state.favorites} searchBox={this.state.searchBox} />} />\n          <Route path='/mylist' render={() => <FavoritePage resetNotes={this.resetNotes} noteObject={this.state.noteObject} favorites={this.state.favorites} faveToggle={this.faveToggle} deleteAll={this.deleteAll} toggleMark={this.toggleMark} resetNew={this.resetNew} oldOnes={this.state.oldOnes} getText={this.getText} deleteIt={this.deleteIt} handleChange={this.handleChange} noteValue={this.state.noteValue} noteBox={this.state.noteBox} setStars={this.setStars} starsObject={this.state.starsObject} allStars={this.state.allStars} resetThis={this.resetThis} makeStars={this.makeStars} addStars={this.addStars} />} />\n        </Switch>\n      </Router>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}